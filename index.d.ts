/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsRouteInfo {
  ospfName: string
  nbrName: string
  svrName: string
  pluginId: string
  connectId: number
  memberNo: number
}
export const PACKER_INT_FILE_LIST: string
export const PACKER_INT_FILE_ID: string
export const PACKER_INT_FILE_SIZE: string
export const PACKER_INT_TIME: string
export const PACKER_STRING_FILE_NAME: string
export const PACKER_STRING_FILE_PATH: string
export const PACKER_STRING_LOCAL_PATH: string
export const PACKER_STRING_MD5_CODE: string
export const PACKER_STRING_FILE_FLAG: string
export const REQUEST_PACKET: number
export const ANSWER_PACKET: number
export declare function init(libPath: string): Promise<void>
export declare function getVersion(): number
export declare function newPacker(version: number): Packer
export declare function newUnpacker(buffer: Buffer): UnPacker
export declare function newUnpackerV1(buffer: Buffer): UnPacker
export declare function getPackVersion(buffer: Buffer): number
export declare function newBizMessage(): BizMessage
export interface T2Header {
  functionNo: number
  systemNo?: number
  branchNo?: number
  subSystemNo?: number
  companyId?: number
}
export declare class BizMessage {
  /** 设置功能号 */
  setFunction(functionNo: number): void
  /** 获取功能号 */
  getFunction(): number
  /** 设置包类型 */
  setPacketType(packetType: number): void
  /** 获取包类型 */
  getPacketType(): number
  /** 设置营业部号 */
  setBranchNo(branchNo: number): void
  /** 获取营业部号 */
  getBranchNo(): number
  /** 设置系统号 */
  setSystemNo(systemNo: number): void
  /** 获取系统号 */
  getSystemNo(): number
  /** 设置子系统号 */
  setSubSystemNo(subSystemNo: number): void
  /** 获取子系统号 */
  getSubSystemNo(): number
  /** 设置发送者编号 */
  setSenderId(senderId: number): void
  /** 获取发送者编号 */
  getSenderId(): number
  /** 设置包序号 */
  setPacketId(packetId: number): void
  /** 获取包序号 */
  getPacketId(): number
  /** 设置目的地路由 */
  setTargetInfo(jsTargetInfo: JsRouteInfo): void
  /** 获取目的地路由 */
  getTargetInfo(): JsRouteInfo
  /** 设置发送者路由 */
  setSendInfo(jsSendInfo: JsRouteInfo): void
  /** 获取发送者路由 */
  getSendInfo(): JsRouteInfo
  /** 设置错误号 */
  setErrorNo(errorNo: number): void
  /** 获取错误号 */
  getErrorNo(): number
  /** 设置错误信息 */
  setErrorInfo(errorInfo: string): void
  /** 获取错误信息 */
  getErrorInfo(): string
  /** 设置返回码 */
  setReturnCode(returnCode: number): void
  /** 获取返回码 */
  getReturnCode(): number
  /** 设置业务内容 */
  setContent(content: Buffer): void
  /** 获取业务内容 */
  getContent(): Buffer
  /**
   * 以下接口用于消息中心1.0的订阅
   * 设置订阅类型
   */
  setIssueType(issueType: number): void
  /** 获取订阅类型 */
  getIssueType(): number
  /** 设置序号 */
  setSequenceNo(sequenceNo: number): void
  /** 获取序号 */
  getSequenceNo(): number
  /** 设置关键字段信息 */
  setKeyInfo(keyData: Buffer): void
  /** 获取关键字段信息 */
  getKeyInfo(): Buffer
  /** 设置附加数据，订阅推送时原样返回 */
  setAppData(appData: Buffer): void
  /** 获取附加数据，订阅推送时原样返回 */
  getAppData(): Buffer
  /** 请求转应答 */
  changeReq2AnsMessage(): number
  /** 获取二进制 */
  getBuff(): Buffer
  /** 设置二进制 */
  setBuff(buff: Buffer): void
  /** 清除消息内的字段，可以下次复用。 */
  reset(): void
  /** 设置公司编号 */
  setCompanyId(companyId: number): void
  /** 获取公司编号 */
  getCompanyId(): number
  /** 设置发送者公司编号 */
  setSenderCompanyId(senderCompanyId: number): void
  /** 获取发送者公司编号 */
  getSenderCompanyId(): number
  setInternalLicense(internalLicense: number): void
  getInternalLicense(): number
  setAppReserved(appReserved: Buffer): void
  getAppReserved(): Buffer
}
export declare class Config {
  /**
  * 从文件加载
  * @param szFileName 文件名，格式类似ini，具体参考开发包示例
  * @return 返回0表示成功，否则失败
  */
  load(fileName: string): number
  /**
  * 保存到文件
  * @param szFileName 文件名
  * @return 返回0表示成功，否则失败
  */
  save(fileName: string): number
  /**
  * 取字符串值
  * @param szSection 节名
  * @param szEntry   变量名
  * @param szDefault 缺省值
  * @return 字符串值，没有找到时返回szDefault
  */
  getString(section: string, entry: string, default: string): string
  /**
  * 取整数值
  * @param szSection 节名
  * @param szEntry   变量名
  * @param iDefault  缺省值
  * @return 整数值，没有找到时返回iDefault
  */
  getInt(section: string, entry: string, default: number): number
  /**
  * 设置字符串值
  * @param szSection 节名
  * @param szEntry   变量名
  * @param szValue   值
  * @return 0表示成功，否则失败
  */
  setString(section: string, entry: string, value: string): number
  /**
  * 设置整数值
  * @param szSection 节名
  * @param szEntry   变量名
  * @param iValue    值
  * @return 0表示成功，否则失败
  */
  setInt(section: string, entry: string, value: number): number
}
export declare class Packer {
  /**
  * 打包器初始化(使用调用者的缓存区)
  * 第一次使用打包器时，可先使用本方法设置好缓冲区(数据长度被置为iDataLen)
  * @param  char * pBuf  缓冲区地址
  * @param  int iBufSize  缓冲区空间
  * @param  int iDataLen  已有数据长度，新增数据加在已有数据之后（只对V1.0格式的包有效）
  */
  setBuffer(pBuf: Buffer, iDataLen?: number | undefined | null): void
  /**
  * 复位，重新开始打另一个包(字段数与记录数置为0行0例)
  * 功能：开始打包，把包长度清零(重复使用已有的缓存区空间)
  * @return 无
  */
  beginPack(): void
  /**
  * 开始打一个结果集
  * 在打单结果集的包时，可以不调用本方法,均取默认值
  * @param const char *szDatasetName 0x20版打包需要指明结果集名字
  * @param int iReturnCode           0x20版打包需要为每个结果集指明返回值
  */
  newDataset(szDatasetName: string, iReturnCode: number): number
  /**
  * 功能：向包添加字段
  *
  * 有执行次序要求:在 NewDataset()或Reset(),SetBuffer()之后,逐个字段按顺序添加;
  *
  * @param szFieldName：字段名
  * @param cFieldType ：字段类型:I整数，D浮点数，C字符，S字符串，R任意二进制数据
  * @param iFieldWidth ：字段宽度（所占最大字节数）
  * @param iFieldScale ：字段精度,即cFieldType='D'时的小数位数(缺省为4位小数)
  * @return 负数表示失败，否则为目前包的长度
  */
  addField(szFieldName: string, cFieldType: number, iFieldWidth: number, iFieldScale: number): number
  /**
  * 功能：向包添加字符串数据
  * 有执行次序要求:必须在所有字段增加完之后,逐个字段按顺序添加;
  * @param       szValue：字符串数据
  * @return 负数表示失败，否则为目前包的长度
  */
  addStr(szValue: string): number
  /**
  * 功能：向包添加整数数据
  * @param       iValue：整数数据
  * @return 负数表示失败，否则为目前包的长度
  */
  addInt(iValue: number): number
  /**
  * 功能：向包添加浮点数据
  * @param       fValue：浮点数据
  * @return 负数表示失败，否则为目前包的长度
  */
  addDouble(dValue: number): number
  /**
  * 功能：向包添加一个字符
  * @param		 cValue：字符
  * @return 负数表示失败，否则为目前包的长度
  */
  addChar(cValue: number): number
  /**
  * 功能：向包添加一个大对象
  * @param	void * lpBuff 数据区
  * @param	int iLen  数据长度
  * @return 负数表示失败，否则为目前包的长度
  */
  addRaw(pRaw: Buffer): number
  /**结束打包 */
  endPack(): void
  /**
  * 功能：取打包结果指针
  * @return 打包结果指针
  */
  getPackBuf(): Buffer
  /**
  * 功能：取打包结果长度
  * @return 打包结果长度
  */
  getPackLen(): number
  /**
  * 功能：取打包结果缓冲区大小
  * @return 打包结果缓冲区大小
  */
  getPackBufSize(): number
  /**
  * 功能：取打包格式版本
  * @return 版本
  */
  getVersion(): number
  /**
  * 设置结果集的返回码(0x20版以上要求)，错误结果集需要设置
  * 返回码取缺省值0，则不设置，如果设置，则必须在EndPack()之前调用
  * @return 版本
  */
  setReturnCode(dwRetCode: number): void
  /**
  * 直接返回当前打包结果的解包接口,必须在EndPack()之后才能调用,在打包器释放时相应的解包器实例也释放
  * @return 解包器接口，此解包接口不能调用 destroy()来释放
  */
  unpack(): UnPacker
  freeMem(): void
  clearValue(): void
  /**
   *
   *
  * 复位，重新开始打另一个包(字段数与记录数置为0行0例)
  * 功能：开始打包，把包长度清零(重复使用已有的缓存区空间)
  * @return 无
  
   */
  beginPackEx(szName: string): void
  /**
   * 20110324 dongpf 增加一个接口函数，用来复位当前结果集
   *
  * 复位当前结果集(字段数与记录数置为0行0例)，不影响其他结果集
  * 功能：复位当前结果集
  * @return 无
  
   */
  clearDataSet(): void
}
export declare class UnPacker {
  getColCount(): number
  getColName(column: number): string
  getColType(column: number): number
  getColScale(column: number): number
  getColWidth(column: number): number
  findColIndex(columnName: string): number
  getStrByIndex(column: number): string
  getStr(columnName: string): string
  getCharByIndex(column: number): number
  getChar(columnName: string): number
  getDoubleByIndex(column: number): number
  getDouble(columnName: string): number
  getIntByIndex(column: number): number
  getInt(columnName: string): number
  getRawByIndex(column: number): Buffer
  getRaw(columnName: string): Buffer
  wasNull(): number
  next(): void
  isEof(): number
  isEmpty(): number
  destroy(): void
  getVersion(): number
  open(buffer: Buffer): number
  getDatasetCount(): number
  setCurrentDatasetByIndex(index: number): number
  setCurrentDataset(datasetName: string): number
  getPackBuf(): Buffer
  getRowCount(): number
  first(): void
  last(): void
  go(row: number): void
  getDatasetName(): string
  openAndCopy(buffer: Buffer): number
  getColTypeByName(columnName: string): number
  getColScaleByName(columnName: string): number
  getColWidthByName(columnName: string): number
}
export type T2SDK = T2Sdk
export declare class T2Sdk {
  constructor()
  setConfig(config: object): void
  send(header: T2Header, body: string): Promise<BizMessage>
  connect(): number
  get isConnected(): boolean
  disconnect(): void
}
